' Preview durch <Alt>d

@startuml Controller-Klasse

interface Promise<T>

package @nestjs/graphql {
  class "@Resolver" as Resolver
  hide Resolver circle

  class "@UseGuards" as UseGuards
  hide UseGuards circle

  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle

  class "@Mutation" as Mutation
  hide Mutation circle

  class "@Args" as Args
  hide Args circle
}

package security.auth {
  class "type Role = 'ARZT' | 'PATIENT' | 'REZEPTIONIST'" as Role
  hide Role circle

  class "@Roles" as Roles
  hide Roles circle

  Roles .right.> Role
}

package patient #DDDDDD {
  package entity #FFFFFF {
    class Patient <<entity>>
  }

  package service #FFFFFF {
    class PatientWriteService << control >>
  }

  class "type PatientDTO = Omit<Patient, 'operationen' | 'aktualisiert' | 'erzeugt'" as PatientDTO
  hide PatientDTO circle

    interface IdInput {
        id: number
    }

  class PatientMutationResolver << control >> << @Resolver() >> << @UseGuards() >> << @UseInterceptors() >> {
    + @Mutation() @Roles() async create(@Args() patientDTO: PatientDTO): Promise<number>
    + @Mutation() @Roles() async update(@Args() patientDTO: PatientDTO): Promise<number>
  }

  PatientMutationResolver o-down-> "1" PatientWriteService : service

  PatientMutationResolver ..> Patient
  PatientMutationResolver ..> PatientDTO
  PatientMutationResolver ..> IdInput
  PatientDTO .up.> Patient
  PatientMutationResolver ..> Promise
  PatientMutationResolver ..> Resolver

  PatientMutationResolver .up.> Roles
  PatientMutationResolver .up.> Role

  PatientDTO .[hidden].> Promise
  PatientDTO .[hidden].> Resolver
}

hide empty members

footer (c) Gruppe 7

@enduml
