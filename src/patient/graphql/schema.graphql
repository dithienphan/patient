
schema {
  query: Query
  mutation: Mutation
}

"Funktionen, um Bücherdaten zu lesen"
type Query {
  patienten(nachname: String): [Patient!]

  patient(id: ID!): Patient
}

"Funktionen, um Patienten neu anzulegen, zu aktualisieren oder zu löschen"
type Mutation {
  create(input: PatientInput!): String

  update(input: PatientUpdateInput!): Int

  delete(id: ID!): Boolean
}

"Daten zum Name eines Patienten"
type Name {
  nachname: String!
  vorname: String!
}

"Datenschema zu einem Patienten, das gelesen wird"
type Patient {
  id: ID!
  version: Int!
  versichertennummer: String!
  versicherungsart: Versicherungsart
  intensiv: Boolean
  geburtsdatum: String
  diagnose: [String]
  name: Name!
}

"Enum-Typ für die Versicherungsart eines Patienten"
enum Versicherungsart {
  GESETZLICH
  PRIVAT
}

"Daten zum Name eines neuen Patienten"
input NameInput {
  nachname: String!
  vorname: String!
}

"Daten zu den Operationen eines Patienten"
input OperationInput {
  eingriff: String!
  behandlungsraum: Int!
}

"Daten für einen neuen Patienten"
input PatientInput {
  versichertennummer: String
  versicherungsart: Versicherungsart
  intensiv: Boolean
  geburtsdatum: String
  diagnose: [String]
  name: NameInput!
  operationen: [OperationInput!]
}

"Daten für einen zu ändernden Patienten"
input PatientUpdateInput {
  id: ID
  version: Int
  versichertennummer: String
  versicherungsart: Versicherungsart
  intensiv: Boolean
  geburtsdatum: String
  diagnose: [String]
}
